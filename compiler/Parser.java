
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Apr 22 23:50:17 EDT 2018
//----------------------------------------------------

package compiler;

import java_cup.runtime.*;
import compiler.syntaxtree.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Apr 22 23:50:17 EDT 2018
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\067\000\002\002\004\000\002\002\004\000\002\003" +
    "\023\000\002\004\004\000\002\004\002\000\002\005\005" +
    "\000\002\005\011\000\002\005\007\000\002\005\007\000" +
    "\002\005\006\000\002\005\011\000\002\005\004\000\002" +
    "\006\010\000\002\006\012\000\002\006\004\000\002\007" +
    "\004\000\002\007\002\000\002\010\005\000\002\010\005" +
    "\000\002\010\005\000\002\010\005\000\002\010\005\000" +
    "\002\010\006\000\002\010\005\000\002\010\010\000\002" +
    "\010\007\000\002\010\006\000\002\010\003\000\002\010" +
    "\003\000\002\010\003\000\002\010\003\000\002\010\003" +
    "\000\002\010\007\000\002\010\006\000\002\010\004\000" +
    "\002\010\005\000\002\011\004\000\002\011\002\000\002" +
    "\012\004\000\002\012\002\000\002\013\003\000\002\013" +
    "\005\000\002\014\005\000\002\014\005\000\002\015\005" +
    "\000\002\015\003\000\002\015\003\000\002\015\003\000" +
    "\002\016\017\000\002\016\016\000\002\016\004\000\002" +
    "\016\004\000\002\017\003\000\002\017\005\000\002\020" +
    "\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\234\000\004\005\005\001\002\000\010\002\ufffd\003" +
    "\ufffd\005\ufffd\001\002\000\004\047\010\001\002\000\004" +
    "\002\007\001\002\000\004\002\001\001\002\000\004\041" +
    "\011\001\002\000\004\017\012\001\002\000\004\021\013" +
    "\001\002\000\004\025\014\001\002\000\004\014\015\001" +
    "\002\000\004\045\016\001\002\000\004\022\017\001\002" +
    "\000\004\043\020\001\002\000\004\044\021\001\002\000" +
    "\004\047\022\001\002\000\004\046\023\001\002\000\004" +
    "\041\024\001\002\000\016\003\030\011\032\016\033\026" +
    "\031\041\026\047\025\001\002\000\006\030\134\043\135" +
    "\001\002\000\020\003\030\011\032\016\033\026\031\041" +
    "\026\042\ufff1\047\025\001\002\000\004\042\126\001\002" +
    "\000\004\040\125\001\002\000\004\045\121\001\002\000" +
    "\004\045\113\001\002\000\004\045\034\001\002\000\022" +
    "\010\040\015\036\023\042\024\037\034\043\045\045\047" +
    "\041\050\035\001\002\000\030\027\uffe6\031\uffe6\032\uffe6" +
    "\033\uffe6\035\uffe6\036\uffe6\037\uffe6\040\uffe6\043\uffe6\044" +
    "\uffe6\046\uffe6\001\002\000\006\012\105\047\104\001\002" +
    "\000\030\027\uffe5\031\uffe5\032\uffe5\033\uffe5\035\uffe5\036" +
    "\uffe5\037\uffe5\040\uffe5\043\uffe5\044\uffe5\046\uffe5\001\002" +
    "\000\030\027\uffe4\031\uffe4\032\uffe4\033\uffe4\035\uffe4\036" +
    "\uffe4\037\uffe4\040\uffe4\043\uffe4\044\uffe4\046\uffe4\001\002" +
    "\000\030\027\uffe3\031\uffe3\032\uffe3\033\uffe3\035\uffe3\036" +
    "\uffe3\037\uffe3\040\uffe3\043\uffe3\044\uffe3\046\uffe3\001\002" +
    "\000\030\027\uffe2\031\uffe2\032\uffe2\033\uffe2\035\uffe2\036" +
    "\uffe2\037\uffe2\040\uffe2\043\uffe2\044\uffe2\046\uffe2\001\002" +
    "\000\022\010\040\015\036\023\042\024\037\034\043\045" +
    "\045\047\041\050\035\001\002\000\022\027\051\031\054" +
    "\032\053\033\050\035\052\037\056\043\055\046\101\001" +
    "\002\000\022\010\040\015\036\023\042\024\037\034\043" +
    "\045\045\047\041\050\035\001\002\000\022\027\051\031" +
    "\054\032\053\033\050\035\052\037\056\043\055\046\047" +
    "\001\002\000\030\027\uffde\031\uffde\032\uffde\033\uffde\035" +
    "\uffde\036\uffde\037\uffde\040\uffde\043\uffde\044\uffde\046\uffde" +
    "\001\002\000\022\010\040\015\036\023\042\024\037\034" +
    "\043\045\045\047\041\050\035\001\002\000\022\010\040" +
    "\015\036\023\042\024\037\034\043\045\045\047\041\050" +
    "\035\001\002\000\022\010\040\015\036\023\042\024\037" +
    "\034\043\045\045\047\041\050\035\001\002\000\022\010" +
    "\040\015\036\023\042\024\037\034\043\045\045\047\041" +
    "\050\035\001\002\000\022\010\040\015\036\023\042\024" +
    "\037\034\043\045\045\047\041\050\035\001\002\000\022" +
    "\010\040\015\036\023\042\024\037\034\043\045\045\047" +
    "\041\050\035\001\002\000\010\003\060\013\061\047\057" +
    "\001\002\000\004\045\063\001\002\000\004\046\062\001" +
    "\002\000\030\027\uffea\031\uffea\032\uffea\033\uffea\035\uffea" +
    "\036\uffea\037\uffea\040\uffea\043\uffea\044\uffea\046\uffea\001" +
    "\002\000\030\027\uffe7\031\uffe7\032\uffe7\033\uffe7\035\uffe7" +
    "\036\uffe7\037\uffe7\040\uffe7\043\uffe7\044\uffe7\046\uffe7\001" +
    "\002\000\024\010\040\015\036\023\042\024\037\034\043" +
    "\045\045\046\064\047\041\050\035\001\002\000\030\027" +
    "\uffe8\031\uffe8\032\uffe8\033\uffe8\035\uffe8\036\uffe8\037\uffe8" +
    "\040\uffe8\043\uffe8\044\uffe8\046\uffe8\001\002\000\024\027" +
    "\051\031\054\032\053\033\050\035\052\036\uffd9\037\056" +
    "\043\055\046\uffd9\001\002\000\006\036\067\046\070\001" +
    "\002\000\022\010\040\015\036\023\042\024\037\034\043" +
    "\045\045\047\041\050\035\001\002\000\030\027\uffe9\031" +
    "\uffe9\032\uffe9\033\uffe9\035\uffe9\036\uffe9\037\uffe9\040\uffe9" +
    "\043\uffe9\044\uffe9\046\uffe9\001\002\000\024\027\051\031" +
    "\054\032\053\033\050\035\052\036\uffd8\037\056\043\055" +
    "\046\uffd8\001\002\000\022\027\051\031\054\032\053\033" +
    "\050\035\052\037\056\043\055\044\073\001\002\000\030" +
    "\027\uffeb\031\uffeb\032\uffeb\033\uffeb\035\uffeb\036\uffeb\037" +
    "\uffeb\040\uffeb\043\uffeb\044\uffeb\046\uffeb\001\002\000\030" +
    "\027\uffef\031\uffef\032\053\033\050\035\052\036\uffef\037" +
    "\uffef\040\uffef\043\uffef\044\uffef\046\uffef\001\002\000\030" +
    "\027\uffed\031\uffed\032\uffed\033\050\035\uffed\036\uffed\037" +
    "\uffed\040\uffed\043\uffed\044\uffed\046\uffed\001\002\000\030" +
    "\027\uffee\031\uffee\032\uffee\033\050\035\uffee\036\uffee\037" +
    "\uffee\040\uffee\043\uffee\044\uffee\046\uffee\001\002\000\030" +
    "\027\ufff0\031\054\032\053\033\050\035\052\036\ufff0\037" +
    "\ufff0\040\ufff0\043\ufff0\044\ufff0\046\ufff0\001\002\000\030" +
    "\027\uffec\031\uffec\032\uffec\033\uffec\035\uffec\036\uffec\037" +
    "\uffec\040\uffec\043\uffec\044\uffec\046\uffec\001\002\000\004" +
    "\040\102\001\002\000\024\003\ufff9\006\ufff9\011\ufff9\016" +
    "\ufff9\020\ufff9\026\ufff9\041\ufff9\042\ufff9\047\ufff9\001\002" +
    "\000\030\027\uffdf\031\uffdf\032\uffdf\033\uffdf\035\uffdf\036" +
    "\uffdf\037\uffdf\040\uffdf\043\uffdf\044\uffdf\046\uffdf\001\002" +
    "\000\004\045\111\001\002\000\004\043\106\001\002\000" +
    "\022\010\040\015\036\023\042\024\037\034\043\045\045" +
    "\047\041\050\035\001\002\000\022\027\051\031\054\032" +
    "\053\033\050\035\052\037\056\043\055\044\110\001\002" +
    "\000\030\027\uffe1\031\uffe1\032\uffe1\033\uffe1\035\uffe1\036" +
    "\uffe1\037\uffe1\040\uffe1\043\uffe1\044\uffe1\046\uffe1\001\002" +
    "\000\004\046\112\001\002\000\030\027\uffe0\031\uffe0\032" +
    "\uffe0\033\uffe0\035\uffe0\036\uffe0\037\uffe0\040\uffe0\043\uffe0" +
    "\044\uffe0\046\uffe0\001\002\000\022\010\040\015\036\023" +
    "\042\024\037\034\043\045\045\047\041\050\035\001\002" +
    "\000\022\027\051\031\054\032\053\033\050\035\052\037" +
    "\056\043\055\046\115\001\002\000\016\003\030\011\032" +
    "\016\033\026\031\041\026\047\025\001\002\000\004\006" +
    "\117\001\002\000\016\003\030\011\032\016\033\026\031" +
    "\041\026\047\025\001\002\000\024\003\ufffb\006\ufffb\011" +
    "\ufffb\016\ufffb\020\ufffb\026\ufffb\041\ufffb\042\ufffb\047\ufffb" +
    "\001\002\000\022\010\040\015\036\023\042\024\037\034" +
    "\043\045\045\047\041\050\035\001\002\000\022\027\051" +
    "\031\054\032\053\033\050\035\052\037\056\043\055\046" +
    "\123\001\002\000\016\003\030\011\032\016\033\026\031" +
    "\041\026\047\025\001\002\000\024\003\ufffa\006\ufffa\011" +
    "\ufffa\016\ufffa\020\ufffa\026\ufffa\041\ufffa\042\ufffa\047\ufffa" +
    "\001\002\000\024\003\ufff6\006\ufff6\011\ufff6\016\ufff6\020" +
    "\ufff6\026\ufff6\041\ufff6\042\ufff6\047\ufff6\001\002\000\004" +
    "\042\127\001\002\000\010\002\uffff\003\uffff\005\uffff\001" +
    "\002\000\022\003\030\011\032\016\033\020\ufff1\026\031" +
    "\041\026\042\ufff1\047\025\001\002\000\004\042\132\001" +
    "\002\000\024\003\ufffc\006\ufffc\011\ufffc\016\ufffc\020\ufffc" +
    "\026\ufffc\041\ufffc\042\ufffc\047\ufffc\001\002\000\006\020" +
    "\ufff2\042\ufff2\001\002\000\022\010\040\015\036\023\042" +
    "\024\037\034\043\045\045\047\041\050\035\001\002\000" +
    "\022\010\040\015\036\023\042\024\037\034\043\045\045" +
    "\047\041\050\035\001\002\000\022\027\051\031\054\032" +
    "\053\033\050\035\052\037\056\043\055\044\137\001\002" +
    "\000\004\030\140\001\002\000\022\010\040\015\036\023" +
    "\042\024\037\034\043\045\045\047\041\050\035\001\002" +
    "\000\022\027\051\031\054\032\053\033\050\035\052\037" +
    "\056\040\142\043\055\001\002\000\024\003\ufff7\006\ufff7" +
    "\011\ufff7\016\ufff7\020\ufff7\026\ufff7\041\ufff7\042\ufff7\047" +
    "\ufff7\001\002\000\022\027\051\031\054\032\053\033\050" +
    "\035\052\037\056\040\144\043\055\001\002\000\024\003" +
    "\ufff8\006\ufff8\011\ufff8\016\ufff8\020\ufff8\026\ufff8\041\ufff8" +
    "\042\ufff8\047\ufff8\001\002\000\010\002\000\003\146\005" +
    "\150\001\002\000\004\042\236\001\002\000\010\002\ufffe" +
    "\003\ufffe\005\ufffe\001\002\000\004\047\151\001\002\000" +
    "\006\007\153\041\152\001\002\000\016\003\uffdc\004\uffdc" +
    "\012\uffdc\017\uffdc\042\uffdc\047\uffdc\001\002\000\004\047" +
    "\154\001\002\000\004\041\155\001\002\000\016\003\uffdc" +
    "\004\uffdc\012\uffdc\017\uffdc\042\uffdc\047\uffdc\001\002\000" +
    "\016\003\uffda\004\162\012\163\017\uffda\042\uffda\047\157" +
    "\001\002\000\006\003\uffd2\047\uffd2\001\002\000\010\003" +
    "\173\017\176\042\175\001\002\000\030\003\uffdd\004\uffdd" +
    "\011\uffdd\012\uffdd\016\uffdd\017\uffdd\020\uffdd\026\uffdd\041" +
    "\uffdd\042\uffdd\047\uffdd\001\002\000\006\003\uffd4\047\uffd4" +
    "\001\002\000\010\003\uffd3\043\171\047\uffd3\001\002\000" +
    "\006\003\166\047\165\001\002\000\004\040\170\001\002" +
    "\000\004\040\167\001\002\000\030\003\uffd6\004\uffd6\011" +
    "\uffd6\012\uffd6\016\uffd6\017\uffd6\020\uffd6\026\uffd6\041\uffd6" +
    "\042\uffd6\047\uffd6\001\002\000\030\003\uffd7\004\uffd7\011" +
    "\uffd7\012\uffd7\016\uffd7\017\uffd7\020\uffd7\026\uffd7\041\uffd7" +
    "\042\uffd7\047\uffd7\001\002\000\004\044\172\001\002\000" +
    "\006\003\uffd5\047\uffd5\001\002\000\006\042\232\046\231" +
    "\001\002\000\010\003\uffdb\017\uffdb\042\uffdb\001\002\000" +
    "\010\002\ufff4\003\ufff4\005\ufff4\001\002\000\010\004\162" +
    "\012\163\047\157\001\002\000\004\047\200\001\002\000" +
    "\004\045\201\001\002\000\012\004\162\012\163\046\204" +
    "\047\157\001\002\000\006\036\217\046\220\001\002\000" +
    "\006\036\uffcd\046\uffcd\001\002\000\004\041\207\001\002" +
    "\000\004\047\206\001\002\000\006\036\uffcb\046\uffcb\001" +
    "\002\000\024\003\uffdc\004\uffdc\011\uffdc\012\uffdc\016\uffdc" +
    "\020\uffdc\026\uffdc\041\uffdc\047\uffdc\001\002\000\024\003" +
    "\030\004\162\011\032\012\163\016\033\020\ufff1\026\031" +
    "\041\026\047\212\001\002\000\004\020\213\001\002\000" +
    "\012\003\uffd2\030\134\043\135\047\uffd2\001\002\000\022" +
    "\010\040\015\036\023\042\024\037\034\043\045\045\047" +
    "\041\050\035\001\002\000\022\027\051\031\054\032\053" +
    "\033\050\035\052\037\056\040\215\043\055\001\002\000" +
    "\004\042\216\001\002\000\010\003\uffd0\017\uffd0\042\uffd0" +
    "\001\002\000\010\004\162\012\163\047\157\001\002\000" +
    "\004\041\221\001\002\000\024\003\uffdc\004\uffdc\011\uffdc" +
    "\012\uffdc\016\uffdc\020\uffdc\026\uffdc\041\uffdc\047\uffdc\001" +
    "\002\000\024\003\030\004\162\011\032\012\163\016\033" +
    "\020\ufff1\026\031\041\026\047\212\001\002\000\004\020" +
    "\224\001\002\000\022\010\040\015\036\023\042\024\037" +
    "\034\043\045\045\047\041\050\035\001\002\000\022\027" +
    "\051\031\054\032\053\033\050\035\052\037\056\040\226" +
    "\043\055\001\002\000\004\042\227\001\002\000\010\003" +
    "\uffd1\017\uffd1\042\uffd1\001\002\000\006\036\uffcc\046\uffcc" +
    "\001\002\000\010\003\uffcf\017\uffcf\042\uffcf\001\002\000" +
    "\010\003\uffce\017\uffce\042\uffce\001\002\000\016\003\uffda" +
    "\004\162\012\163\017\uffda\042\uffda\047\157\001\002\000" +
    "\010\003\173\017\176\042\235\001\002\000\010\002\ufff5" +
    "\003\ufff5\005\ufff5\001\002\000\010\002\ufff3\003\ufff3\005" +
    "\ufff3\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\234\000\006\002\005\003\003\001\001\000\004\004" +
    "\144\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\026\001\001\000\002\001\001\000\006\005\127\007" +
    "\130\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\010" +
    "\043\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\010\102\001\001\000\002\001\001\000\004" +
    "\010\045\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\077\001\001\000\004\010\076\001\001\000\004" +
    "\010\075\001\001\000\004\010\074\001\001\000\004\010" +
    "\073\001\001\000\004\010\071\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\010\064\013\065\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\010" +
    "\070\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\010\106\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\010\113\001\001\000\002\001\001" +
    "\000\004\005\115\001\001\000\002\001\001\000\004\005" +
    "\117\001\001\000\002\001\001\000\004\010\121\001\001" +
    "\000\002\001\001\000\004\005\123\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\005\127\007\132\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\010\142\001\001" +
    "\000\004\010\135\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\010\140\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\006" +
    "\146\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\011\232\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\011\155\001\001" +
    "\000\010\012\157\014\160\015\163\001\001\000\002\001" +
    "\001\000\004\016\173\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\176\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\015\204\017" +
    "\201\020\202\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\011\207\001\001\000\012\005\127\007\210\014\160" +
    "\015\163\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\213\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\015\204\020\227\001\001\000" +
    "\002\001\001\000\004\011\221\001\001\000\012\005\127" +
    "\007\222\014\160\015\163\001\001\000\002\001\001\000" +
    "\004\010\224\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\012\233\014\160\015\163\001\001" +
    "\000\004\016\173\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public boolean errorOccured;
    
    @Override
    public void syntax_error(Symbol cur_token)
    {
        errorOccured = true;
        System.out.println("Parse error at line " + cur_token.left + ", column " + cur_token.right);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // FORMAL ::= TYPE ID 
            {
              Formal RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = new Formal(type, id, typeleft, typeright);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FORMAL",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // FORMAL_LIST ::= FORMAL_LIST COMMA FORMAL 
            {
              FormalList RESULT =null;
		int formal_listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int formal_listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		FormalList formal_list = (FormalList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int formalleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int formalright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Formal formal = (Formal)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        formal_list.addElement(formal);
        RESULT = formal_list;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FORMAL_LIST",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // FORMAL_LIST ::= FORMAL 
            {
              FormalList RESULT =null;
		int formalleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int formalright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Formal formal = (Formal)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        FormalList formalList = new FormalList();
        formalList.addElement(formal);
        RESULT = formalList;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FORMAL_LIST",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // METHOD_DECL ::= error RBRACE 
            {
              MethodDecl RESULT =null;
		
    
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("METHOD_DECL",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // METHOD_DECL ::= error RPAREN 
            {
              MethodDecl RESULT =null;
		
    
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("METHOD_DECL",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // METHOD_DECL ::= PUBLIC TYPE ID LPAREN RPAREN LBRACE VAR_DECL_LIST STATEMENT_LIST RETURN EXPRESSION SEMICOLON RBRACE 
            {
              MethodDecl RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int function_nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int function_nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		Identifier function_name = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int var_listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int var_listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		VarDeclList var_list = (VarDeclList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int statement_listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int statement_listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		StatementList statement_list = (StatementList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp expression = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
        RESULT = new MethodDecl(type, function_name, new FormalList(), var_list, statement_list, expression, function_nameleft, function_nameright);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("METHOD_DECL",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // METHOD_DECL ::= PUBLIC TYPE ID LPAREN FORMAL_LIST RPAREN LBRACE VAR_DECL_LIST STATEMENT_LIST RETURN EXPRESSION SEMICOLON RBRACE 
            {
              MethodDecl RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		int function_nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int function_nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		Identifier function_name = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int formal_listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int formal_listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		FormalList formal_list = (FormalList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int var_listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int var_listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		VarDeclList var_list = (VarDeclList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int statement_listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int statement_listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		StatementList statement_list = (StatementList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp expression = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
        RESULT = new MethodDecl(type, function_name, formal_list, var_list, statement_list, expression, function_nameleft, function_nameright);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("METHOD_DECL",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // TYPE ::= ID 
            {
              Type RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = new IdentifierType(id.s, idleft, idright);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPE",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // TYPE ::= INT 
            {
              Type RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = new IntegerType(ileft, iright);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPE",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // TYPE ::= BOOLEAN 
            {
              Type RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = new BooleanType(bleft, bright);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPE",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // TYPE ::= INT LBRACKET RBRACKET 
            {
              Type RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
        RESULT = new IntArrayType(ileft, iright);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPE",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // VAR_DECL ::= TYPE error SEMICOLON 
            {
              VarDecl RESULT =null;
		
       
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VAR_DECL",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // VAR_DECL ::= TYPE ID SEMICOLON 
            {
              VarDecl RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        RESULT = new VarDecl(type, id, typeleft, typeright);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VAR_DECL",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // EXPRESSION_LIST ::= EXPRESSION_LIST COMMA EXPRESSION 
            {
              ExpList RESULT =null;
		int expression_listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expression_listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExpList expression_list = (ExpList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp expression = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        expression_list.addElement(expression);
        RESULT = expression_list;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION_LIST",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // EXPRESSION_LIST ::= EXPRESSION 
            {
              ExpList RESULT =null;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp expression = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        ExpList expList = new ExpList();
        expList.addElement(expression);
        RESULT = expList;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION_LIST",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // METHOD_DECL_LIST ::= 
            {
              MethodDeclList RESULT =null;
		
        RESULT = new MethodDeclList();
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("METHOD_DECL_LIST",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // METHOD_DECL_LIST ::= METHOD_DECL_LIST METHOD_DECL 
            {
              MethodDeclList RESULT =null;
		int method_listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int method_listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		MethodDeclList method_list = (MethodDeclList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int methodleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int methodright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		MethodDecl method = (MethodDecl)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        method_list.addElement(method);
        RESULT = method_list;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("METHOD_DECL_LIST",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // VAR_DECL_LIST ::= 
            {
              VarDeclList RESULT =null;
		
        RESULT = new VarDeclList();
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VAR_DECL_LIST",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // VAR_DECL_LIST ::= VAR_DECL_LIST VAR_DECL 
            {
              VarDeclList RESULT =null;
		int var_listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int var_listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		VarDeclList var_list = (VarDeclList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		VarDecl var = (VarDecl)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        var_list.addElement(var);
        RESULT = var_list;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VAR_DECL_LIST",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // EXPRESSION ::= LPAREN EXPRESSION RPAREN 
            {
              Exp RESULT =null;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp expression = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        RESULT = expression;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // EXPRESSION ::= NOT EXPRESSION 
            {
              Exp RESULT =null;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp expression = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = new Not(expression, expressionleft, expressionright);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // EXPRESSION ::= NEW ID LPAREN RPAREN 
            {
              Exp RESULT =null;
		int class_nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int class_nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Identifier class_name = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
        RESULT = new NewObject(class_name, class_nameleft, class_nameright);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // EXPRESSION ::= NEW INT LBRACKET EXPRESSION RBRACKET 
            {
              Exp RESULT =null;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp expression = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        RESULT = new NewArray(expression, expressionleft, expressionright);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // EXPRESSION ::= THIS 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = new This(tleft, tright);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // EXPRESSION ::= ID 
            {
              Exp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = new IdentifierExp(id.s, idleft, idright);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // EXPRESSION ::= FALSE 
            {
              Exp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = new False(fleft, fright);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // EXPRESSION ::= TRUE 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = new True(tleft, tright);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // EXPRESSION ::= INTEGER 
            {
              Exp RESULT =null;
		int integerleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int integerright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer integer = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = new IntegerLiteral(integer, integerleft, integerright);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // EXPRESSION ::= EXPRESSION DOT error RPAREN 
            {
              Exp RESULT =null;
		int var_nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int var_nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Exp var_name = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		
        // error
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // EXPRESSION ::= EXPRESSION DOT ID LPAREN RPAREN 
            {
              Exp RESULT =null;
		int var_nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int var_nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Exp var_name = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int function_nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int function_nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Identifier function_name = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
        RESULT = new Call(var_name, function_name, new ExpList(), var_nameleft, var_nameright);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // EXPRESSION ::= EXPRESSION DOT ID LPAREN EXPRESSION_LIST RPAREN 
            {
              Exp RESULT =null;
		int var_nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int var_nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Exp var_name = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int function_nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int function_nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Identifier function_name = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ExpList params = (ExpList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        RESULT = new Call(var_name, function_name, params, var_nameleft, var_nameright);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // EXPRESSION ::= EXPRESSION DOT LENGTH 
            {
              Exp RESULT =null;
		int arrayleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int arrayright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp array = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
        RESULT = new ArrayLength(array, arrayleft, arrayright);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // EXPRESSION ::= EXPRESSION LBRACKET EXPRESSION RBRACKET 
            {
              Exp RESULT =null;
		int arrayleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int arrayright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Exp array = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp index = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        RESULT = new ArrayLookup(array, index, arrayleft, arrayright);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // EXPRESSION ::= EXPRESSION MULT EXPRESSION 
            {
              Exp RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp exp2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = new Times(exp1, exp2, exp1left, exp1right);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // EXPRESSION ::= EXPRESSION MINUS EXPRESSION 
            {
              Exp RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp exp2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = new Minus(exp1, exp2, exp1left, exp1right);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // EXPRESSION ::= EXPRESSION PLUS EXPRESSION 
            {
              Exp RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp exp2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = new Plus(exp1, exp2, exp1left, exp1right);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // EXPRESSION ::= EXPRESSION LESSTHAN EXPRESSION 
            {
              Exp RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp exp2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = new LessThan(exp1, exp2, exp1left, exp1right);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // EXPRESSION ::= EXPRESSION AND EXPRESSION 
            {
              Exp RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp exp2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = new And(exp1, exp2, exp1left, exp1right);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // STATEMENT_LIST ::= 
            {
              StatementList RESULT =null;
		
        RESULT = new StatementList();
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STATEMENT_LIST",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // STATEMENT_LIST ::= STATEMENT STATEMENT_LIST 
            {
              StatementList RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int statement_listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int statement_listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		StatementList statement_list = (StatementList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        StatementList newStatementList = new StatementList();
        newStatementList.addElement(statement);
        for(int index = 0; index < statement_list.size(); ++index)
        {
            newStatementList.addElement(statement_list.elementAt(index));
        }
        RESULT = newStatementList;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STATEMENT_LIST",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // CLASS_DECL ::= error RBRACE 
            {
              ClassDecl RESULT =null;
		
    
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CLASS_DECL",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // CLASS_DECL ::= CLASS ID EXTENDS ID LBRACE VAR_DECL_LIST METHOD_DECL_LIST RBRACE 
            {
              ClassDecl RESULT =null;
		int class_nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int class_nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Identifier class_name = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int extend_nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int extend_nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Identifier extend_name = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int var_listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int var_listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		VarDeclList var_list = (VarDeclList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int method_listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int method_listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		MethodDeclList method_list = (MethodDeclList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        RESULT = new ClassDeclExtends(class_name, extend_name, var_list, method_list, class_nameleft, class_nameright);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CLASS_DECL",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // CLASS_DECL ::= CLASS ID LBRACE VAR_DECL_LIST METHOD_DECL_LIST RBRACE 
            {
              ClassDecl RESULT =null;
		int class_nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int class_nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Identifier class_name = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int var_listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int var_listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		VarDeclList var_list = (VarDeclList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int method_listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int method_listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		MethodDeclList method_list = (MethodDeclList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        RESULT = new ClassDeclSimple(class_name, var_list, method_list, class_nameleft, class_nameright);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CLASS_DECL",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // STATEMENT ::= error SEMICOLON 
            {
              Statement RESULT =null;
		
        // error
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STATEMENT",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // STATEMENT ::= ID LBRACKET EXPRESSION RBRACKET ASSIGNMENT EXPRESSION SEMICOLON 
            {
              Statement RESULT =null;
		int var_nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int var_nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Identifier var_name = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Exp index = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp expression = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        RESULT = new ArrayAssign(var_name, index, expression, var_nameleft, var_nameright);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STATEMENT",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // STATEMENT ::= ID ASSIGNMENT EXPRESSION SEMICOLON 
            {
              Statement RESULT =null;
		int var_nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int var_nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Identifier var_name = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp expression = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        RESULT = new Assign(var_name, expression, var_nameleft, var_nameright);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STATEMENT",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // STATEMENT ::= PRINTLN LPAREN EXPRESSION RPAREN SEMICOLON 
            {
              Statement RESULT =null;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp expression = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
        RESULT = new Print(expression, expressionleft, expressionright);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STATEMENT",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // STATEMENT ::= WHILE LPAREN EXPRESSION RPAREN STATEMENT 
            {
              Statement RESULT =null;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp expression = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = new While(expression, statement, expressionleft, expressionright);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STATEMENT",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // STATEMENT ::= IF LPAREN EXPRESSION RPAREN STATEMENT ELSE STATEMENT 
            {
              Statement RESULT =null;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Exp expression = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int if_trueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int if_trueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Statement if_true = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int if_falseleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int if_falseright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement if_false = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = new If(expression, if_true, if_false, expressionleft, expressionright);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STATEMENT",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // STATEMENT ::= LBRACE STATEMENT_LIST RBRACE 
            {
              Statement RESULT =null;
		int statement_listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int statement_listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		StatementList statement_list = (StatementList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        RESULT = new Block(statement_list, statement_listleft, statement_listright);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STATEMENT",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // CLASS_DECL_LIST ::= 
            {
              ClassDeclList RESULT =null;
		
        RESULT = new ClassDeclList();
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CLASS_DECL_LIST",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // CLASS_DECL_LIST ::= CLASS_DECL_LIST CLASS_DECL 
            {
              ClassDeclList RESULT =null;
		int class_listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int class_listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ClassDeclList class_list = (ClassDeclList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int class_declleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int class_declright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ClassDecl class_decl = (ClassDecl)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        class_list.addElement(class_decl);
        RESULT = class_list;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CLASS_DECL_LIST",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // MAIN_CLASS ::= CLASS ID LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING LBRACKET RBRACKET ID RPAREN LBRACE STATEMENT RBRACE RBRACE 
            {
              MainClass RESULT =null;
		int class_nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-15)).left;
		int class_nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-15)).right;
		Identifier class_name = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-15)).value;
		int args_nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int args_nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Identifier args_name = (Identifier)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
        RESULT = new MainClass(class_name, args_name, statement);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MAIN_CLASS",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-16)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // PROGRAM ::= MAIN_CLASS CLASS_DECL_LIST 
            {
              Program RESULT =null;
		int mainleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mainright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		MainClass main = (MainClass)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int class_listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int class_listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ClassDeclList class_list = (ClassDeclList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = new Program(main, class_list);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PROGRAM",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= PROGRAM EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

